---
crpg_reverse_proxy_service_name: crpg-reverse-proxy

crpg_api_user: crpg
crpg_api_service_name: crpg-web-api
crpg_api_path: "/home/{{ crpg_api_user }}/{{ crpg_api_service_name }}"
crpg_api_port: 8000
crpg_api_log_file: "/var/log/crpg/{{ crpg_api_service_name }}.log"

crpg_ui_path: "/var/www/{{ crpg_domain_name }}"

crpg_domain_name: c-rpg.eu

crpg_db_service_name: crpg-db
crpg_db: crpg
crpg_db_user: crpg
crpg_db_user_password: !vault |
  $ANSIBLE_VAULT;1.1;AES256
  38303737393930623462303066366563363435616265376637656538383336373931333532326362
  3364653166383839383735346266336661613566373265650a613637626666656635653134623165
  38626562646536376361343732396539373764663132663262333566326339383239653065356138
  3434356465313665390a643036346635343562646136653063646166366264396664313530326334
  3163

datadog_db_user: dd-agent # Same username as Datadog agent so ident authentication can be used

nginx_version: 1.23.1
nginx_opentracing_version: 0.26.0
dotnet_version: 6.0
datadog_opentracing_version: 1.3.5

datadog_checks:
    nginx:
        init_config:
        instances:
            - nginx_status_url: http://localhost:81/nginx_status
        logs:
            - type: file
              path: /var/log/nginx/access.log
              service: "{{ crpg_reverse_proxy_service_name }}"
              source: nginx
            - type: file
              path: /var/log/nginx/error.log
              service: "{{ crpg_reverse_proxy_service_name }}"
              source: nginx
    postgres:
        init_config:
        instances:
            - host: localhost
              port: 5432
              dbname: "{{ crpg_db }}"
              username: "{{ datadog_db_user }}"
              dbm: true
              custom_queries:
                  - metric_prefix: crpg
                    query: SELECT
                        (SELECT COUNT(*) FROM users) AS users,
                        (SELECT COUNT(*) FROM users WHERE updated_at > now() - INTERVAL '1 month') AS active_users_30d,
                        (SELECT COUNT(*) FROM users WHERE updated_at > now() - INTERVAL '1 week') AS active_users_7d,
                        (SELECT COUNT(*) FROM users WHERE updated_at > now() - INTERVAL '1 day') AS active_users_1d,
                        (SELECT COUNT(*) FROM users WHERE updated_at > now() - INTERVAL '15 min') AS active_users_15min,
                        (SELECT AVG(gold) FROM users WHERE updated_at > now() - INTERVAL '1 month') AS active_users_30d_average_gold,
                        (SELECT AVG(level) FROM characters WHERE updated_at > now() - INTERVAL '1 month') AS active_characters_30d_average_level
                    columns:
                        - name: users.count
                          type: gauge
                        - name: users.active.30d.count
                          type: gauge
                        - name: users.active.7d.count
                          type: gauge
                        - name: users.active.1d.count
                          type: gauge
                        - name: users.active.15min.count
                          type: gauge
                        - name: users.active.30d.average_gold
                          type: gauge
                        - name: characters.active.30d.average_level
                          type: gauge
        logs:
            - type: file
              path: /var/log/postgresql/postgresql.csv
              service: "{{ crpg_db_service_name }}"
              source: postgresql
              log_processing_rules:
                  - type: multi_line
                    pattern: \d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])
                    name: new_log_start_with_date
    csharp:
        init_config:
        instances:
        logs:
            - type: file
              path: "{{ crpg_api_log_file }}"
              service: "{{ crpg_api_service_name }}"
              source: csharp
    http_check:
        init_config:
        instances:
            - name: cRPG Web API
              url: "http://localhost:{{ crpg_api_port }}/health"
              content_match: ^Healthy$
              service: "{{ crpg_api_service_name }}"
              min_collection_interval: 60
            - name: Steam Open-ID
              url: https://steamcommunity.com/openid
              service: steam
              min_collection_interval: 60
              tls_verify: false
              tls_ignore_warning: true
    tls:
        init_config:
        instances:
            - server: localhost
