// <auto-generated />
using System;
using Crpg.Domain.Entities;
using Crpg.Domain.Entities.Battles;
using Crpg.Domain.Entities.Clans;
using Crpg.Domain.Entities.Items;
using Crpg.Domain.Entities.Parties;
using Crpg.Domain.Entities.Restrictions;
using Crpg.Domain.Entities.Settlements;
using Crpg.Domain.Entities.Users;
using Crpg.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Crpg.Persistence.Migrations
{
    [DbContext(typeof(CrpgDbContext))]
    partial class CrpgDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "battle_fighter_application_status", new[] { "pending", "declined", "accepted" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "battle_mercenary_application_status", new[] { "pending", "declined", "accepted" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "battle_phase", new[] { "preparation", "hiring", "scheduled", "live", "end" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "battle_side", new[] { "attacker", "defender" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "clan_invitation_status", new[] { "pending", "declined", "accepted" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "clan_invitation_type", new[] { "request", "offer" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "clan_member_role", new[] { "member", "officer", "leader" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "culture", new[] { "neutral", "aserai", "battania", "empire", "khuzait", "looters", "sturgia", "vlandia" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "damage_type", new[] { "undefined", "cut", "pierce", "blunt" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "item_slot", new[] { "head", "shoulder", "body", "hand", "leg", "mount_harness", "mount", "weapon0", "weapon1", "weapon2", "weapon3" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "item_type", new[] { "undefined", "head_armor", "shoulder_armor", "body_armor", "hand_armor", "leg_armor", "mount_harness", "mount", "shield", "bow", "crossbow", "one_handed_weapon", "two_handed_weapon", "polearm", "thrown", "arrows", "bolts", "pistol", "musket", "bullets", "banner" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "party_status", new[] { "idle", "idle_in_settlement", "recruiting_in_settlement", "moving_to_point", "following_party", "moving_to_settlement", "moving_to_attack_party", "moving_to_attack_settlement", "in_battle" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "platform", new[] { "steam", "epic", "gog" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "region", new[] { "europe", "north_america", "asia" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "restriction_type", new[] { "join", "chat" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role", new[] { "user", "moderator", "admin" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "settlement_type", new[] { "village", "castle", "town" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "weapon_class", new[] { "undefined", "dagger", "one_handed_sword", "two_handed_sword", "one_handed_axe", "two_handed_axe", "mace", "pick", "two_handed_mace", "one_handed_polearm", "two_handed_polearm", "low_grip_polearm", "arrow", "bolt", "cartridge", "bow", "crossbow", "stone", "boulder", "throwing_axe", "throwing_knife", "javelin", "pistol", "musket", "small_shield", "large_shield", "banner" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Crpg.Domain.Entities.Battles.Battle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<BattlePhase>("Phase")
                        .HasColumnType("battle_phase")
                        .HasColumnName("phase");

                    b.Property<Point>("Position")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("position");

                    b.Property<Region>("Region")
                        .HasColumnType("region")
                        .HasColumnName("region");

                    b.Property<DateTime?>("ScheduledFor")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_for");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_battles");

                    b.ToTable("battles", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Battles.BattleFighter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BattleId")
                        .HasColumnType("integer")
                        .HasColumnName("battle_id");

                    b.Property<bool>("Commander")
                        .HasColumnType("boolean")
                        .HasColumnName("commander");

                    b.Property<int>("MercenarySlots")
                        .HasColumnType("integer")
                        .HasColumnName("mercenary_slots");

                    b.Property<int?>("PartyId")
                        .HasColumnType("integer")
                        .HasColumnName("party_id");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("settlement_id");

                    b.Property<BattleSide>("Side")
                        .HasColumnType("battle_side")
                        .HasColumnName("side");

                    b.HasKey("Id")
                        .HasName("pk_battle_fighters");

                    b.HasIndex("BattleId")
                        .HasDatabaseName("ix_battle_fighters_battle_id");

                    b.HasIndex("PartyId")
                        .HasDatabaseName("ix_battle_fighters_party_id");

                    b.HasIndex("SettlementId")
                        .HasDatabaseName("ix_battle_fighters_settlement_id");

                    b.ToTable("battle_fighters", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Battles.BattleFighterApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BattleId")
                        .HasColumnType("integer")
                        .HasColumnName("battle_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer")
                        .HasColumnName("party_id");

                    b.Property<BattleSide>("Side")
                        .HasColumnType("battle_side")
                        .HasColumnName("side");

                    b.Property<BattleFighterApplicationStatus>("Status")
                        .HasColumnType("battle_fighter_application_status")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_battle_fighter_applications");

                    b.HasIndex("BattleId")
                        .HasDatabaseName("ix_battle_fighter_applications_battle_id");

                    b.HasIndex("PartyId")
                        .HasDatabaseName("ix_battle_fighter_applications_party_id");

                    b.ToTable("battle_fighter_applications", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Battles.BattleMercenary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer")
                        .HasColumnName("application_id");

                    b.Property<int>("BattleId")
                        .HasColumnType("integer")
                        .HasColumnName("battle_id");

                    b.Property<int>("CaptainFighterId")
                        .HasColumnType("integer")
                        .HasColumnName("captain_fighter_id");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<BattleSide>("Side")
                        .HasColumnType("battle_side")
                        .HasColumnName("side");

                    b.HasKey("Id")
                        .HasName("pk_battle_mercenaries");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("ix_battle_mercenaries_application_id");

                    b.HasIndex("BattleId")
                        .HasDatabaseName("ix_battle_mercenaries_battle_id");

                    b.HasIndex("CaptainFighterId")
                        .HasDatabaseName("ix_battle_mercenaries_captain_fighter_id");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_battle_mercenaries_character_id");

                    b.ToTable("battle_mercenaries", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Battles.BattleMercenaryApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BattleId")
                        .HasColumnType("integer")
                        .HasColumnName("battle_id");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<BattleSide>("Side")
                        .HasColumnType("battle_side")
                        .HasColumnName("side");

                    b.Property<BattleMercenaryApplicationStatus>("Status")
                        .HasColumnType("battle_mercenary_application_status")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Wage")
                        .HasColumnType("integer")
                        .HasColumnName("wage");

                    b.HasKey("Id")
                        .HasName("pk_battle_mercenary_applications");

                    b.HasIndex("BattleId")
                        .HasDatabaseName("ix_battle_mercenary_applications_battle_id");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_battle_mercenary_applications_character_id");

                    b.ToTable("battle_mercenary_applications", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Characters.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoRepair")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_repair");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<float>("ExperienceMultiplier")
                        .HasColumnType("real")
                        .HasColumnName("experience_multiplier");

                    b.Property<int>("Generation")
                        .HasColumnType("integer")
                        .HasColumnName("generation");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("SkippedTheFun")
                        .HasColumnType("boolean")
                        .HasColumnName("skipped_the_fun");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_characters");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_characters_user_id_name")
                        .HasFilter("deleted_at IS NULL");

                    b.ToTable("characters", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Clans.Clan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BannerKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("banner_key");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("PrimaryColor")
                        .HasColumnType("bigint")
                        .HasColumnName("primary_color");

                    b.Property<Region>("Region")
                        .HasColumnType("region")
                        .HasColumnName("region");

                    b.Property<long>("SecondaryColor")
                        .HasColumnType("bigint")
                        .HasColumnName("secondary_color");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_clans");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_clans_name");

                    b.HasIndex("Tag")
                        .IsUnique()
                        .HasDatabaseName("ix_clans_tag");

                    b.ToTable("clans", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Clans.ClanInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClanId")
                        .HasColumnType("integer")
                        .HasColumnName("clan_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("InviteeId")
                        .HasColumnType("integer")
                        .HasColumnName("invitee_id");

                    b.Property<int>("InviterId")
                        .HasColumnType("integer")
                        .HasColumnName("inviter_id");

                    b.Property<ClanInvitationStatus>("Status")
                        .HasColumnType("clan_invitation_status")
                        .HasColumnName("status");

                    b.Property<ClanInvitationType>("Type")
                        .HasColumnType("clan_invitation_type")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_clan_invitations");

                    b.HasIndex("ClanId")
                        .HasDatabaseName("ix_clan_invitations_clan_id");

                    b.HasIndex("InviteeId")
                        .HasDatabaseName("ix_clan_invitations_invitee_id");

                    b.HasIndex("InviterId")
                        .HasDatabaseName("ix_clan_invitations_inviter_id");

                    b.ToTable("clan_invitations", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Clans.ClanMember", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("ClanId")
                        .HasColumnType("integer")
                        .HasColumnName("clan_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<ClanMemberRole>("Role")
                        .HasColumnType("clan_member_role")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId")
                        .HasName("pk_clan_members");

                    b.HasIndex("ClanId")
                        .HasDatabaseName("ix_clan_members_clan_id");

                    b.ToTable("clan_members", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Items.EquippedItem", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<ItemSlot>("Slot")
                        .HasColumnType("item_slot")
                        .HasColumnName("slot");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserItemId")
                        .HasColumnType("integer")
                        .HasColumnName("user_item_id");

                    b.HasKey("CharacterId", "Slot")
                        .HasName("pk_equipped_items");

                    b.HasIndex("UserItemId")
                        .HasDatabaseName("ix_equipped_items_user_item_id");

                    b.ToTable("equipped_items", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Items.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Culture>("Culture")
                        .HasColumnType("culture")
                        .HasColumnName("culture");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<int>("Requirement")
                        .HasColumnType("integer")
                        .HasColumnName("requirement");

                    b.Property<float>("Tier")
                        .HasColumnType("real")
                        .HasColumnName("tier");

                    b.Property<ItemType>("Type")
                        .HasColumnType("item_type")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<float>("Weight")
                        .HasColumnType("real")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_items");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Items.UserItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseItemId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("base_item_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_items");

                    b.HasIndex("BaseItemId")
                        .HasDatabaseName("ix_user_items_base_item_id");

                    b.HasIndex("UserId", "BaseItemId", "Rank")
                        .IsUnique()
                        .HasDatabaseName("ix_user_items_user_id_base_item_id_rank");

                    b.ToTable("user_items", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Parties.Party", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Gold")
                        .HasColumnType("integer")
                        .HasColumnName("gold");

                    b.Property<Point>("Position")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("position");

                    b.Property<Region>("Region")
                        .HasColumnType("region")
                        .HasColumnName("region");

                    b.Property<PartyStatus>("Status")
                        .HasColumnType("party_status")
                        .HasColumnName("status");

                    b.Property<int?>("TargetedPartyId")
                        .HasColumnType("integer")
                        .HasColumnName("targeted_party_id");

                    b.Property<int?>("TargetedSettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("targeted_settlement_id");

                    b.Property<float>("Troops")
                        .HasColumnType("real")
                        .HasColumnName("troops");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<MultiPoint>("Waypoints")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("waypoints");

                    b.HasKey("Id")
                        .HasName("pk_parties");

                    b.HasIndex("TargetedPartyId")
                        .HasDatabaseName("ix_parties_targeted_party_id");

                    b.HasIndex("TargetedSettlementId")
                        .HasDatabaseName("ix_parties_targeted_settlement_id");

                    b.ToTable("parties", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Parties.PartyItem", b =>
                {
                    b.Property<int>("PartyId")
                        .HasColumnType("integer")
                        .HasColumnName("party_id");

                    b.Property<string>("ItemId")
                        .HasColumnType("text")
                        .HasColumnName("item_id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("PartyId", "ItemId")
                        .HasName("pk_party_items");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_party_items_item_id");

                    b.ToTable("party_items", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Restrictions.Restriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<int>("RestrictedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("restricted_by_user_id");

                    b.Property<int>("RestrictedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("restricted_user_id");

                    b.Property<RestrictionType>("Type")
                        .HasColumnType("restriction_type")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_restrictions");

                    b.HasIndex("RestrictedByUserId")
                        .HasDatabaseName("ix_restrictions_restricted_by_user_id");

                    b.HasIndex("RestrictedUserId")
                        .HasDatabaseName("ix_restrictions_restricted_user_id");

                    b.ToTable("restrictions", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Settlements.Settlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Culture>("Culture")
                        .HasColumnType("culture")
                        .HasColumnName("culture");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<Point>("Position")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("position");

                    b.Property<Region>("Region")
                        .HasColumnType("region")
                        .HasColumnName("region");

                    b.Property<string>("Scene")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scene");

                    b.Property<int>("Troops")
                        .HasColumnType("integer")
                        .HasColumnName("troops");

                    b.Property<SettlementType>("Type")
                        .HasColumnType("settlement_type")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_settlements");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_settlements_owner_id");

                    b.HasIndex("Region", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_settlements_region_name");

                    b.ToTable("settlements", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Settlements.SettlementItem", b =>
                {
                    b.Property<int>("SettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("settlement_id");

                    b.Property<string>("ItemId")
                        .HasColumnType("text")
                        .HasColumnName("item_id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("SettlementId", "ItemId")
                        .HasName("pk_settlement_items");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_settlement_items_item_id");

                    b.ToTable("settlement_items", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarFull")
                        .HasColumnType("text")
                        .HasColumnName("avatar_full");

                    b.Property<string>("AvatarMedium")
                        .HasColumnType("text")
                        .HasColumnName("avatar_medium");

                    b.Property<string>("AvatarSmall")
                        .HasColumnType("text")
                        .HasColumnName("avatar_small");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Gold")
                        .HasColumnType("integer")
                        .HasColumnName("gold");

                    b.Property<int>("HeirloomPoints")
                        .HasColumnType("integer")
                        .HasColumnName("heirloom_points");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Platform>("Platform")
                        .HasColumnType("platform")
                        .HasColumnName("platform");

                    b.Property<string>("PlatformUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("platform_user_id");

                    b.Property<Role>("Role")
                        .HasColumnType("role")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Platform", "PlatformUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_platform_platform_user_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Battles.BattleFighter", b =>
                {
                    b.HasOne("Crpg.Domain.Entities.Battles.Battle", "Battle")
                        .WithMany("Fighters")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_fighters_battles_battle_id");

                    b.HasOne("Crpg.Domain.Entities.Parties.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .HasConstraintName("fk_battle_fighters_parties_party_id");

                    b.HasOne("Crpg.Domain.Entities.Settlements.Settlement", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId")
                        .HasConstraintName("fk_battle_fighters_settlements_settlement_id");

                    b.Navigation("Battle");

                    b.Navigation("Party");

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Battles.BattleFighterApplication", b =>
                {
                    b.HasOne("Crpg.Domain.Entities.Battles.Battle", "Battle")
                        .WithMany("FighterApplications")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_fighter_applications_battles_battle_id");

                    b.HasOne("Crpg.Domain.Entities.Parties.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_fighter_applications_parties_party_id");

                    b.Navigation("Battle");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Battles.BattleMercenary", b =>
                {
                    b.HasOne("Crpg.Domain.Entities.Battles.BattleMercenaryApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_mercenaries_battle_mercenary_applications_applicatio");

                    b.HasOne("Crpg.Domain.Entities.Battles.Battle", "Battle")
                        .WithMany("Mercenaries")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_mercenaries_battles_battle_id");

                    b.HasOne("Crpg.Domain.Entities.Battles.BattleFighter", "CaptainFighter")
                        .WithMany()
                        .HasForeignKey("CaptainFighterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_mercenaries_battle_fighters_captain_fighter_id");

                    b.HasOne("Crpg.Domain.Entities.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_mercenaries_characters_character_id");

                    b.Navigation("Application");

                    b.Navigation("Battle");

                    b.Navigation("CaptainFighter");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Battles.BattleMercenaryApplication", b =>
                {
                    b.HasOne("Crpg.Domain.Entities.Battles.Battle", "Battle")
                        .WithMany("MercenaryApplications")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_mercenary_applications_battles_battle_id");

                    b.HasOne("Crpg.Domain.Entities.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_mercenary_applications_characters_character_id");

                    b.Navigation("Battle");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Characters.Character", b =>
                {
                    b.HasOne("Crpg.Domain.Entities.Users.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_characters_users_user_id");

                    b.OwnsOne("Crpg.Domain.Entities.Characters.CharacterCharacteristics", "Characteristics", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");

                            b1.OwnsOne("Crpg.Domain.Entities.Characters.CharacterAttributes", "Attributes", b2 =>
                                {
                                    b2.Property<int>("CharacterCharacteristicsCharacterId")
                                        .HasColumnType("integer")
                                        .HasColumnName("id");

                                    b2.Property<int>("Agility")
                                        .HasColumnType("integer")
                                        .HasColumnName("agility");

                                    b2.Property<int>("Points")
                                        .HasColumnType("integer")
                                        .HasColumnName("attribute_points");

                                    b2.Property<int>("Strength")
                                        .HasColumnType("integer")
                                        .HasColumnName("strength");

                                    b2.HasKey("CharacterCharacteristicsCharacterId");

                                    b2.ToTable("characters");

                                    b2.WithOwner()
                                        .HasForeignKey("CharacterCharacteristicsCharacterId")
                                        .HasConstraintName("fk_characters_characters_id");
                                });

                            b1.OwnsOne("Crpg.Domain.Entities.Characters.CharacterSkills", "Skills", b2 =>
                                {
                                    b2.Property<int>("CharacterCharacteristicsCharacterId")
                                        .HasColumnType("integer")
                                        .HasColumnName("id");

                                    b2.Property<int>("Athletics")
                                        .HasColumnType("integer")
                                        .HasColumnName("athletics");

                                    b2.Property<int>("IronFlesh")
                                        .HasColumnType("integer")
                                        .HasColumnName("iron_flesh");

                                    b2.Property<int>("MountedArchery")
                                        .HasColumnType("integer")
                                        .HasColumnName("mounted_archery");

                                    b2.Property<int>("Points")
                                        .HasColumnType("integer")
                                        .HasColumnName("skill_points");

                                    b2.Property<int>("PowerDraw")
                                        .HasColumnType("integer")
                                        .HasColumnName("power_draw");

                                    b2.Property<int>("PowerStrike")
                                        .HasColumnType("integer")
                                        .HasColumnName("power_strike");

                                    b2.Property<int>("PowerThrow")
                                        .HasColumnType("integer")
                                        .HasColumnName("power_throw");

                                    b2.Property<int>("Riding")
                                        .HasColumnType("integer")
                                        .HasColumnName("riding");

                                    b2.Property<int>("Shield")
                                        .HasColumnType("integer")
                                        .HasColumnName("shield");

                                    b2.Property<int>("WeaponMaster")
                                        .HasColumnType("integer")
                                        .HasColumnName("weapon_master");

                                    b2.HasKey("CharacterCharacteristicsCharacterId");

                                    b2.ToTable("characters");

                                    b2.WithOwner()
                                        .HasForeignKey("CharacterCharacteristicsCharacterId")
                                        .HasConstraintName("fk_characters_characters_id");
                                });

                            b1.OwnsOne("Crpg.Domain.Entities.Characters.CharacterWeaponProficiencies", "WeaponProficiencies", b2 =>
                                {
                                    b2.Property<int>("CharacterCharacteristicsCharacterId")
                                        .HasColumnType("integer")
                                        .HasColumnName("id");

                                    b2.Property<int>("Bow")
                                        .HasColumnType("integer")
                                        .HasColumnName("bow");

                                    b2.Property<int>("Crossbow")
                                        .HasColumnType("integer")
                                        .HasColumnName("crossbow");

                                    b2.Property<int>("OneHanded")
                                        .HasColumnType("integer")
                                        .HasColumnName("one_handed");

                                    b2.Property<int>("Points")
                                        .HasColumnType("integer")
                                        .HasColumnName("weapon_proficiency_points");

                                    b2.Property<int>("Polearm")
                                        .HasColumnType("integer")
                                        .HasColumnName("polearm");

                                    b2.Property<int>("Throwing")
                                        .HasColumnType("integer")
                                        .HasColumnName("throwing");

                                    b2.Property<int>("TwoHanded")
                                        .HasColumnType("integer")
                                        .HasColumnName("two_handed");

                                    b2.HasKey("CharacterCharacteristicsCharacterId");

                                    b2.ToTable("characters");

                                    b2.WithOwner()
                                        .HasForeignKey("CharacterCharacteristicsCharacterId")
                                        .HasConstraintName("fk_characters_characters_id");
                                });

                            b1.Navigation("Attributes")
                                .IsRequired();

                            b1.Navigation("Skills")
                                .IsRequired();

                            b1.Navigation("WeaponProficiencies")
                                .IsRequired();
                        });

                    b.OwnsOne("Crpg.Domain.Entities.Characters.CharacterRating", "Rating", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<float>("Deviation")
                                .HasColumnType("real")
                                .HasColumnName("rating_deviation");

                            b1.Property<float>("Value")
                                .HasColumnType("real")
                                .HasColumnName("rating");

                            b1.Property<float>("Volatility")
                                .HasColumnType("real")
                                .HasColumnName("rating_volatility");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Crpg.Domain.Entities.Characters.CharacterStatistics", "Statistics", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<int>("Assists")
                                .HasColumnType("integer")
                                .HasColumnName("assists");

                            b1.Property<int>("Deaths")
                                .HasColumnType("integer")
                                .HasColumnName("deaths");

                            b1.Property<int>("Kills")
                                .HasColumnType("integer")
                                .HasColumnName("kills");

                            b1.Property<TimeSpan>("PlayTime")
                                .HasColumnType("interval")
                                .HasColumnName("play_time");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.Navigation("Characteristics")
                        .IsRequired();

                    b.Navigation("Rating")
                        .IsRequired();

                    b.Navigation("Statistics")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Clans.ClanInvitation", b =>
                {
                    b.HasOne("Crpg.Domain.Entities.Clans.Clan", "Clan")
                        .WithMany("Invitations")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clan_invitations_clans_clan_id");

                    b.HasOne("Crpg.Domain.Entities.Users.User", "Invitee")
                        .WithMany()
                        .HasForeignKey("InviteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clan_invitations_users_invitee_id");

                    b.HasOne("Crpg.Domain.Entities.Users.User", "Inviter")
                        .WithMany()
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clan_invitations_users_inviter_id");

                    b.Navigation("Clan");

                    b.Navigation("Invitee");

                    b.Navigation("Inviter");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Clans.ClanMember", b =>
                {
                    b.HasOne("Crpg.Domain.Entities.Clans.Clan", "Clan")
                        .WithMany("Members")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clan_members_clans_clan_id");

                    b.HasOne("Crpg.Domain.Entities.Users.User", "User")
                        .WithOne("ClanMembership")
                        .HasForeignKey("Crpg.Domain.Entities.Clans.ClanMember", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clan_members_users_user_id");

                    b.Navigation("Clan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Items.EquippedItem", b =>
                {
                    b.HasOne("Crpg.Domain.Entities.Characters.Character", "Character")
                        .WithMany("EquippedItems")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equipped_items_characters_character_id");

                    b.HasOne("Crpg.Domain.Entities.Items.UserItem", "UserItem")
                        .WithMany("EquippedItems")
                        .HasForeignKey("UserItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equipped_items_user_items_user_item_id");

                    b.Navigation("Character");

                    b.Navigation("UserItem");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Items.Item", b =>
                {
                    b.OwnsOne("Crpg.Domain.Entities.Items.ItemWeaponComponent", "PrimaryWeapon", b1 =>
                        {
                            b1.Property<string>("ItemId")
                                .HasColumnType("text")
                                .HasColumnName("id");

                            b1.Property<int>("Accuracy")
                                .HasColumnType("integer")
                                .HasColumnName("primary_accuracy");

                            b1.Property<float>("Balance")
                                .HasColumnType("real")
                                .HasColumnName("primary_balance");

                            b1.Property<int>("BodyArmor")
                                .HasColumnType("integer")
                                .HasColumnName("primary_body_armor");

                            b1.Property<WeaponClass>("Class")
                                .HasColumnType("weapon_class")
                                .HasColumnName("primary_class");

                            b1.Property<long>("Flags")
                                .HasColumnType("bigint")
                                .HasColumnName("primary_flags");

                            b1.Property<int>("Handling")
                                .HasColumnType("integer")
                                .HasColumnName("primary_handling");

                            b1.Property<string>("ItemUsage")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("primary_weapon_item_usage");

                            b1.Property<int>("Length")
                                .HasColumnType("integer")
                                .HasColumnName("primary_length");

                            b1.Property<int>("MissileSpeed")
                                .HasColumnType("integer")
                                .HasColumnName("primary_missile_speed");

                            b1.Property<int>("StackAmount")
                                .HasColumnType("integer")
                                .HasColumnName("primary_stack_amount");

                            b1.Property<int>("SwingDamage")
                                .HasColumnType("integer")
                                .HasColumnName("primary_swing_damage");

                            b1.Property<DamageType>("SwingDamageType")
                                .HasColumnType("damage_type")
                                .HasColumnName("primary_swing_damage_type");

                            b1.Property<int>("SwingSpeed")
                                .HasColumnType("integer")
                                .HasColumnName("primary_swing_speed");

                            b1.Property<int>("ThrustDamage")
                                .HasColumnType("integer")
                                .HasColumnName("primary_thrust_damage");

                            b1.Property<DamageType>("ThrustDamageType")
                                .HasColumnType("damage_type")
                                .HasColumnName("primary_thrust_damage_type");

                            b1.Property<int>("ThrustSpeed")
                                .HasColumnType("integer")
                                .HasColumnName("primary_thrust_speed");

                            b1.HasKey("ItemId");

                            b1.ToTable("items");

                            b1.WithOwner()
                                .HasForeignKey("ItemId")
                                .HasConstraintName("fk_items_items_id");
                        });

                    b.OwnsOne("Crpg.Domain.Entities.Items.ItemWeaponComponent", "SecondaryWeapon", b1 =>
                        {
                            b1.Property<string>("ItemId")
                                .HasColumnType("text")
                                .HasColumnName("id");

                            b1.Property<int>("Accuracy")
                                .HasColumnType("integer")
                                .HasColumnName("secondary_accuracy");

                            b1.Property<float>("Balance")
                                .HasColumnType("real")
                                .HasColumnName("secondary_balance");

                            b1.Property<int>("BodyArmor")
                                .HasColumnType("integer")
                                .HasColumnName("secondary_body_armor");

                            b1.Property<WeaponClass>("Class")
                                .HasColumnType("weapon_class")
                                .HasColumnName("secondary_class");

                            b1.Property<long>("Flags")
                                .HasColumnType("bigint")
                                .HasColumnName("secondary_flags");

                            b1.Property<int>("Handling")
                                .HasColumnType("integer")
                                .HasColumnName("secondary_handling");

                            b1.Property<string>("ItemUsage")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("secondary_weapon_item_usage");

                            b1.Property<int>("Length")
                                .HasColumnType("integer")
                                .HasColumnName("secondary_length");

                            b1.Property<int>("MissileSpeed")
                                .HasColumnType("integer")
                                .HasColumnName("secondary_missile_speed");

                            b1.Property<int>("StackAmount")
                                .HasColumnType("integer")
                                .HasColumnName("secondary_stack_amount");

                            b1.Property<int>("SwingDamage")
                                .HasColumnType("integer")
                                .HasColumnName("secondary_swing_damage");

                            b1.Property<DamageType>("SwingDamageType")
                                .HasColumnType("damage_type")
                                .HasColumnName("secondary_swing_damage_type");

                            b1.Property<int>("SwingSpeed")
                                .HasColumnType("integer")
                                .HasColumnName("secondary_swing_speed");

                            b1.Property<int>("ThrustDamage")
                                .HasColumnType("integer")
                                .HasColumnName("secondary_thrust_damage");

                            b1.Property<DamageType>("ThrustDamageType")
                                .HasColumnType("damage_type")
                                .HasColumnName("secondary_thrust_damage_type");

                            b1.Property<int>("ThrustSpeed")
                                .HasColumnType("integer")
                                .HasColumnName("secondary_thrust_speed");

                            b1.HasKey("ItemId");

                            b1.ToTable("items");

                            b1.WithOwner()
                                .HasForeignKey("ItemId")
                                .HasConstraintName("fk_items_items_id");
                        });

                    b.OwnsOne("Crpg.Domain.Entities.Items.ItemWeaponComponent", "TertiaryWeapon", b1 =>
                        {
                            b1.Property<string>("ItemId")
                                .HasColumnType("text")
                                .HasColumnName("id");

                            b1.Property<int>("Accuracy")
                                .HasColumnType("integer")
                                .HasColumnName("tertiary_accuracy");

                            b1.Property<float>("Balance")
                                .HasColumnType("real")
                                .HasColumnName("tertiary_balance");

                            b1.Property<int>("BodyArmor")
                                .HasColumnType("integer")
                                .HasColumnName("tertiary_body_armor");

                            b1.Property<WeaponClass>("Class")
                                .HasColumnType("weapon_class")
                                .HasColumnName("tertiary_class");

                            b1.Property<long>("Flags")
                                .HasColumnType("bigint")
                                .HasColumnName("tertiary_flags");

                            b1.Property<int>("Handling")
                                .HasColumnType("integer")
                                .HasColumnName("tertiary_handling");

                            b1.Property<string>("ItemUsage")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("tertiary_weapon_item_usage");

                            b1.Property<int>("Length")
                                .HasColumnType("integer")
                                .HasColumnName("tertiary_length");

                            b1.Property<int>("MissileSpeed")
                                .HasColumnType("integer")
                                .HasColumnName("tertiary_missile_speed");

                            b1.Property<int>("StackAmount")
                                .HasColumnType("integer")
                                .HasColumnName("tertiary_stack_amount");

                            b1.Property<int>("SwingDamage")
                                .HasColumnType("integer")
                                .HasColumnName("tertiary_swing_damage");

                            b1.Property<DamageType>("SwingDamageType")
                                .HasColumnType("damage_type")
                                .HasColumnName("tertiary_swing_damage_type");

                            b1.Property<int>("SwingSpeed")
                                .HasColumnType("integer")
                                .HasColumnName("tertiary_swing_speed");

                            b1.Property<int>("ThrustDamage")
                                .HasColumnType("integer")
                                .HasColumnName("tertiary_thrust_damage");

                            b1.Property<DamageType>("ThrustDamageType")
                                .HasColumnType("damage_type")
                                .HasColumnName("tertiary_thrust_damage_type");

                            b1.Property<int>("ThrustSpeed")
                                .HasColumnType("integer")
                                .HasColumnName("tertiary_thrust_speed");

                            b1.HasKey("ItemId");

                            b1.ToTable("items");

                            b1.WithOwner()
                                .HasForeignKey("ItemId")
                                .HasConstraintName("fk_items_items_id");
                        });

                    b.OwnsOne("Crpg.Domain.Entities.Items.ItemArmorComponent", "Armor", b1 =>
                        {
                            b1.Property<string>("ItemId")
                                .HasColumnType("text")
                                .HasColumnName("id");

                            b1.Property<int>("ArmArmor")
                                .HasColumnType("integer")
                                .HasColumnName("armor_arm");

                            b1.Property<int>("BodyArmor")
                                .HasColumnType("integer")
                                .HasColumnName("armor_body");

                            b1.Property<int>("HeadArmor")
                                .HasColumnType("integer")
                                .HasColumnName("armor_head");

                            b1.Property<int>("LegArmor")
                                .HasColumnType("integer")
                                .HasColumnName("armor_leg");

                            b1.Property<int>("MaterialType")
                                .HasColumnType("integer")
                                .HasColumnName("armor_material_type");

                            b1.HasKey("ItemId");

                            b1.ToTable("items");

                            b1.WithOwner()
                                .HasForeignKey("ItemId")
                                .HasConstraintName("fk_items_items_id");
                        });

                    b.OwnsOne("Crpg.Domain.Entities.Items.ItemMountComponent", "Mount", b1 =>
                        {
                            b1.Property<string>("ItemId")
                                .HasColumnType("text")
                                .HasColumnName("id");

                            b1.Property<int>("BodyLength")
                                .HasColumnType("integer")
                                .HasColumnName("mount_body_length");

                            b1.Property<int>("ChargeDamage")
                                .HasColumnType("integer")
                                .HasColumnName("mount_charge_damage");

                            b1.Property<int>("HitPoints")
                                .HasColumnType("integer")
                                .HasColumnName("mount_hit_points");

                            b1.Property<int>("Maneuver")
                                .HasColumnType("integer")
                                .HasColumnName("mount_maneuver");

                            b1.Property<int>("Speed")
                                .HasColumnType("integer")
                                .HasColumnName("mount_speed");

                            b1.HasKey("ItemId");

                            b1.ToTable("items");

                            b1.WithOwner()
                                .HasForeignKey("ItemId")
                                .HasConstraintName("fk_items_items_id");
                        });

                    b.Navigation("Armor");

                    b.Navigation("Mount");

                    b.Navigation("PrimaryWeapon");

                    b.Navigation("SecondaryWeapon");

                    b.Navigation("TertiaryWeapon");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Items.UserItem", b =>
                {
                    b.HasOne("Crpg.Domain.Entities.Items.Item", "BaseItem")
                        .WithMany("UserItems")
                        .HasForeignKey("BaseItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_items_items_base_item_id");

                    b.HasOne("Crpg.Domain.Entities.Users.User", "User")
                        .WithMany("Items")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_items_users_user_id");

                    b.Navigation("BaseItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Parties.Party", b =>
                {
                    b.HasOne("Crpg.Domain.Entities.Users.User", "User")
                        .WithOne("Party")
                        .HasForeignKey("Crpg.Domain.Entities.Parties.Party", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parties_users_user_id");

                    b.HasOne("Crpg.Domain.Entities.Parties.Party", "TargetedParty")
                        .WithMany()
                        .HasForeignKey("TargetedPartyId")
                        .HasConstraintName("fk_parties_parties_targeted_party_id");

                    b.HasOne("Crpg.Domain.Entities.Settlements.Settlement", "TargetedSettlement")
                        .WithMany()
                        .HasForeignKey("TargetedSettlementId")
                        .HasConstraintName("fk_parties_settlements_targeted_settlement_id");

                    b.Navigation("TargetedParty");

                    b.Navigation("TargetedSettlement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Parties.PartyItem", b =>
                {
                    b.HasOne("Crpg.Domain.Entities.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_party_items_items_item_id");

                    b.HasOne("Crpg.Domain.Entities.Parties.Party", "Party")
                        .WithMany("Items")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_party_items_parties_party_id");

                    b.Navigation("Item");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Restrictions.Restriction", b =>
                {
                    b.HasOne("Crpg.Domain.Entities.Users.User", "RestrictedByUser")
                        .WithMany()
                        .HasForeignKey("RestrictedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_restrictions_users_restricted_by_user_id");

                    b.HasOne("Crpg.Domain.Entities.Users.User", "RestrictedUser")
                        .WithMany("Restrictions")
                        .HasForeignKey("RestrictedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_restrictions_users_restricted_user_id");

                    b.Navigation("RestrictedByUser");

                    b.Navigation("RestrictedUser");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Settlements.Settlement", b =>
                {
                    b.HasOne("Crpg.Domain.Entities.Parties.Party", "Owner")
                        .WithMany("OwnedSettlements")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_settlements_parties_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Settlements.SettlementItem", b =>
                {
                    b.HasOne("Crpg.Domain.Entities.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_settlement_items_items_item_id");

                    b.HasOne("Crpg.Domain.Entities.Settlements.Settlement", "Settlement")
                        .WithMany("Items")
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_settlement_items_settlements_settlement_id");

                    b.Navigation("Item");

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Battles.Battle", b =>
                {
                    b.Navigation("FighterApplications");

                    b.Navigation("Fighters");

                    b.Navigation("Mercenaries");

                    b.Navigation("MercenaryApplications");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Characters.Character", b =>
                {
                    b.Navigation("EquippedItems");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Clans.Clan", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Items.Item", b =>
                {
                    b.Navigation("UserItems");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Items.UserItem", b =>
                {
                    b.Navigation("EquippedItems");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Parties.Party", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("OwnedSettlements");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Settlements.Settlement", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Crpg.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("ClanMembership");

                    b.Navigation("Items");

                    b.Navigation("Party");

                    b.Navigation("Restrictions");
                });
#pragma warning restore 612, 618
        }
    }
}
